# реализация классов с циклическим буфером FIFO

class MyList(list):
    """Наследник класса List с измененным методом pop, который удаляет первый элемент в списке"""
    # + простота реализации
    # + доступны все методы списков. Например, итерация.
    # - через методы списков можно повлиять на хранимые классом объекты
    def pop(self, **kwargs):
        # удаляет и возвращает первый элемент в списке
        item = self[0]
        self.remove(self[0])
        return item


class FifoList:
    """Самостоятельный класс, который для своей работы использует список"""
    # + доступны только те методы, которые заложены в классе
    # - если нужны дополнительные методы, то их работу необходимо описывать отдельно
    def __init__(self):
        self.items = []

    def append(self, value):
        # добавляет элемент в конец списка
        self.items.append(value)

    def pop(self):
        # удаляет и возвращает первый элемент в списке
        return self.items.pop(0)


if __name__ == '__main__':
    f = MyList()
    f.append(1)
    f.append(2)
    f.append(3)
    print(f.pop())

    d = FifoList()
    d.append(4)
    d.append(5)
    d.append(6)
    print(d.pop())
